import os
import logging
import paho.mqtt.client as mqtt
import base64
import warnings

# Suppress non-critical DeprecationWarnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

# Configuration
broker = 'localhost'  # Or replace with the actual IP/hostname of the Jetson Orin's MQTT broker
port = 1883
image_topic_pi1 = 'images/pi1'
image_topic_pi2 = 'images/pi2'
image_topic_pi3 = 'images/pi3'
image_publish_topic_jetson = 'images/jetson_orin'  # Topic for sending images to Jetson Orin
image_directory_pi1 = './images_from_pi1/'
image_directory_pi2 = './images_from_pi2/'
image_directory_pi3 = './images_from_pi3/'

# Set up logging
logging.basicConfig(filename='logs/image_receiver.log', level=logging.INFO,
                    format='%(asctime)s %(levelname)s:%(message)s')

# MQTT callbacks
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        logging.info("Connected successfully to broker")
    else:
        logging.error(f"Connection failed with code {rc}")

    logging.info(f"Subscribing to topics {image_topic_pi1}, {image_topic_pi2}, and {image_topic_pi3}")
    client.subscribe([(image_topic_pi1, 0), (image_topic_pi2, 0), (image_topic_pi3, 0)])

def on_message(client, userdata, msg):
    try:
        topic = msg.topic
        image_data = base64.b64decode(msg.payload)

        # Determine the correct directory and prefix based on the topic
        if topic == image_topic_pi1:
            image_directory = image_directory_pi1
            prefix = 'p1_'
        elif topic == image_topic_pi2:
            image_directory = image_directory_pi2
            prefix = 'p2_'
        elif topic == image_topic_pi3:
            image_directory = image_directory_pi3
            prefix = 'p3_'
        else:
            logging.error(f"Unknown topic: {topic}")
            return

        # Get the next image number
        image_number = get_next_image_number(image_directory, prefix)
        image_path = os.path.join(image_directory, f"{prefix}{image_number:02d}.jpg")

        # Save the image
        os.makedirs(image_directory, exist_ok=True)
        with open(image_path, 'wb') as file:
            file.write(image_data)

        logging.info(f"Image received and saved to {image_path}")

        # Publish the image to the Jetson Orin
        encoded_image = base64.b64encode(image_data).decode('utf-8')
        client.publish(image_publish_topic_jetson, encoded_image)
        logging.info(f"Image forwarded to Jetson Orin on topic {image_publish_topic_jetson}")

    except Exception as e:
        logging.error(f"Failed to process message: {e}")

def get_next_image_number(directory, prefix):
    try:
        files = os.listdir(directory)
    except FileNotFoundError:
        return 1  # Return 1 if the directory does not exist yet

    numbers = [
        int(f.split('_')[1].split('.')[0])
        for f in files
        if f.startswith(prefix) and f.split('_')[1].split('.')[0].isdigit()
    ]
    return max(numbers, default=0) + 1

def main():
    logging.info("Starting MQTT image receiver...")
    client = mqtt.Client(protocol=mqtt.MQTTv311)  # Use MQTT version 3.1.1

    client.enable_logger(logging.getLogger())  # Enable built-in logging

    client.on_connect = on_connect
    client.on_message = on_message

    client.connect(broker, port, 60)
    client.loop_forever()

if __name__ == "__main__":
    main()

